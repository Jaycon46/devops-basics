name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            npm install
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Validate HTML structure
        run: |
          echo "🔍 Validating HTML files..."

          # Check if index.html exists
          if [ -f "index.html" ]; then
            echo "✅ index.html found"
          else
            echo "❌ index.html missing"
            exit 1
          fi

          # Basic HTML structure validation
          if grep -q "<!DOCTYPE html>" index.html; then
            echo "✅ DOCTYPE declaration found"
          else
            echo "❌ Missing DOCTYPE declaration"
            exit 1
          fi

          if grep -q "<html" index.html && grep -q "</html>" index.html; then
            echo "✅ HTML tags found"
          else
            echo "❌ Missing HTML tags"
            exit 1
          fi

      - name: Run HTML validation (if available)
        run: |
          if command -v html-validate &> /dev/null || [ -f "node_modules/.bin/html-validate" ]; then
            echo "🔍 Running HTML validator..."
            npx html-validate *.html || echo "HTML validation completed with warnings"
          else
            echo "📝 HTML validator not available, skipping detailed validation"
          fi

      - name: Check file structure
        run: |
          echo "📁 Checking project structure..."
          ls -la

          echo "📋 Project files:"
          find . -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" -o -name "*.yml" | grep -v node_modules | sort

  javascript-lint:
    runs-on: ubuntu-latest
    name: JavaScript Linting and Validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Extract and validate JavaScript
        run: |
          echo "🔍 Checking for JavaScript issues..."

          # Check for undefined variables
          if grep -n "undefinedVariable" *.html; then
            echo "❌ Found undefined variables in JavaScript"
            exit 1
          fi

          # Check for console.log with undefined
          if grep -n "console\.log.*undefined" *.html; then
            echo "❌ Found console.log with undefined variables"
            exit 1
          fi

          # Extract JavaScript from script tags for basic syntax check
          if grep -o '<script[^>]*>.*</script>' *.html > /dev/null 2>&1; then
            echo "✅ JavaScript code found in HTML"
            echo "🔍 Performing basic JavaScript validation..."
            
            # Extract JS content and save to temporary file
            grep -zo '<script[^>]*>[^<]*</script>' *.html | sed 's/<script[^>]*>//g; s/<\/script>//g' > temp_extracted.js || true
            
            if [ -s temp_extracted.js ]; then
              echo "🔍 Running Node.js syntax check..."
              node -c temp_extracted.js && echo "✅ JavaScript syntax is valid" || echo "⚠️ JavaScript syntax issues detected"
              rm -f temp_extracted.js
            fi
          else
            echo "📝 No JavaScript found in HTML files"
          fi

          echo "✅ JavaScript validation completed"

  browser-test:
    runs-on: ubuntu-latest
    name: Browser JavaScript Testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Puppeteer
        run: npm install puppeteer

      - name: Create browser test
        run: |
          cat > browser-test.js << 'EOF'
          const puppeteer = require('puppeteer');

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            
            // Listen for console errors
            const errors = [];
            page.on('pageerror', error => {
              errors.push(error.message);
            });
            
            page.on('error', error => {
              errors.push(error.message);
            });
            
            page.on('console', msg => {
              if (msg.type() === 'error') {
                errors.push(msg.text());
              }
            });
            
            try {
              // Load the HTML file
              await page.goto('file://' + process.cwd() + '/index.html');
              
              // Wait for page to load and JS to execute
              await page.waitForTimeout(3000);
              
              if (errors.length > 0) {
                console.log('❌ JavaScript errors found:');
                errors.forEach(error => console.log('  -', error));
                process.exit(1);
              } else {
                console.log('✅ No JavaScript errors found');
              }
            } catch (error) {
              console.log('❌ Browser test failed:', error.message);
              process.exit(1);
            } finally {
              await browser.close();
            }
          })();
          EOF

      - name: Run browser test
        run: node browser-test.js

  security-scan:
    runs-on: ubuntu-latest
    name: Security and Quality Checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security scan
        run: |
          echo "🔒 Running security checks..."

          # Check for sensitive files
          echo "Checking for sensitive files..."
          sensitive_files=$(find . -name "*.key" -o -name "*.pem" -o -name ".env" -o -name "*.p12" -o -name "*.jks" | grep -v node_modules || true)

          if [ -n "$sensitive_files" ]; then
            echo "❌ Sensitive files detected:"
            echo "$sensitive_files"
            exit 1
          else
            echo "✅ No sensitive files found"
          fi

          # Check for hardcoded secrets
          echo "Checking for potential secrets..."
          if grep -ri "password.*=" --include="*.html" --include="*.js" . | grep -v "mypassword" | grep -v "yourpassword" | grep -v "rootpassword"; then
            echo "⚠️ Potential hardcoded passwords found"
          else
            echo "✅ No hardcoded secrets detected"
          fi

      - name: Code quality checks
        run: |
          echo "📊 Running code quality checks..."

          # Check for TODO comments
          todo_count=$(grep -r "TODO\|FIXME\|HACK" --include="*.html" --include="*.css" --include="*.js" . | wc -l || echo "0")
          echo "📝 Found $todo_count TODO/FIXME comments"

          # Check file sizes
          large_files=$(find . -type f -size +1M -not -path "./node_modules/*" -not -path "./.git/*" || true)
          if [ -n "$large_files" ]; then
            echo "⚠️ Large files detected:"
            echo "$large_files"
          else
            echo "✅ No large files found"
          fi

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build and Test
    needs: [test, javascript-lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image..."
          docker build -t devops-basics:test .

      - name: Test Docker container
        run: |
          echo "🧪 Testing Docker container..."
          # Start container in background
          docker run -d -p 3000:3000 --name test-container devops-basics:test

          # Wait for container to start
          echo "⏳ Waiting for container to start..."
          sleep 15

          # Test if container is responding
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Docker container test passed"
              break
            else
              echo "⏳ Attempt $attempt/$max_attempts failed, retrying..."
              sleep 5
              attempt=$((attempt + 1))
            fi
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Docker container test failed"
            docker logs test-container
            exit 1
          fi

          # Cleanup
          docker stop test-container
          docker rm test-container

      - name: Test docker-compose (if available)
        run: |
          if [ -f "docker-compose.yml" ]; then
            echo "🐳 Testing docker-compose..."
            docker-compose up -d
            sleep 20
            
            # Test if services are running
            if docker-compose ps | grep -q "Up"; then
              echo "✅ Docker Compose services are running"
            else
              echo "❌ Docker Compose test failed"
              docker-compose logs
              exit 1
            fi
            
            docker-compose down
          else
            echo "📝 No docker-compose.yml found, skipping compose test"
          fi

  build-test:
    runs-on: ubuntu-latest
    name: Build and Integration Test
    needs: [test, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Build simulation
        run: |
          echo "🏗️ Simulating build process..."

          # Create a build directory
          mkdir -p build

          # Copy files to build directory
          cp *.html build/ 2>/dev/null || echo "No HTML files to copy"
          cp *.css build/ 2>/dev/null || echo "No CSS files to copy"
          cp *.js build/ 2>/dev/null || echo "No JS files to copy"

          # Copy package.json if it exists
          if [ -f "package.json" ]; then
            cp package.json build/
          fi

          echo "✅ Build simulation completed"
          ls -la build/

      - name: Integration tests
        run: |
          echo "🧪 Running integration tests..."

          # Test if files are properly structured
          if [ -f "build/index.html" ]; then
            echo "✅ Main HTML file exists in build"
          else
            echo "❌ Main HTML file missing in build"
            exit 1
          fi

          # Test if HTML is valid
          if grep -q "DevOps" build/index.html; then
            echo "✅ HTML content validation passed"
          else
            echo "❌ HTML content validation failed"
            exit 1
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [docker-build, build-test, browser-test]
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Environment: staging"
          echo "Branch: dev"
          echo "Commit: ${{ github.sha }}"
          echo "✅ Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [docker-build, build-test, browser-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Environment: production"
          echo "Branch: main"
          echo "Commit: ${{ github.sha }}"
          echo "✅ Production deployment completed"

  notify:
    runs-on: ubuntu-latest
    name: Pipeline Notification
    needs:
      [
        test,
        javascript-lint,
        browser-test,
        security-scan,
        docker-build,
        build-test,
      ]
    if: always()

    steps:
      - name: Pipeline completion
        run: |
          echo "🎉 CI/CD Pipeline completed!"
          echo ""
          echo "📊 Pipeline Summary:"
          echo "  - HTML validation: ${{ needs.test.result }}"
          echo "  - JavaScript lint: ${{ needs.javascript-lint.result }}"
          echo "  - Browser test: ${{ needs.browser-test.result }}"
          echo "  - Security scan: ${{ needs.security-scan.result }}"
          echo "  - Docker build: ${{ needs.docker-build.result }}"
          echo "  - Build test: ${{ needs.build-test.result }}"
          echo ""

          if [ "${{ needs.test.result }}" = "success" ] && \
             [ "${{ needs.javascript-lint.result }}" = "success" ] && \
             [ "${{ needs.browser-test.result }}" = "success" ] && \
             [ "${{ needs.security-scan.result }}" = "success" ] && \
             [ "${{ needs.docker-build.result }}" = "success" ] && \
             [ "${{ needs.build-test.result }}" = "success" ]; then
            echo "✅ All checks passed successfully"
            echo "🚀 Ready for deployment!"
          else
            echo "❌ Some checks failed. Please review the pipeline results."
          fi

          echo ""
          echo "📈 Pipeline completed at: $(date)"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
